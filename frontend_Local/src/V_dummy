import React, { useState, useEffect } from "react";
import {
  Button,
  Container,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  Tab,
  Tabs,
  TextField,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Card,
  CardContent,
  Radio,
  FormControlLabel,
  RadioGroup,
  Grid,
  Paper,
} from "@mui/material";
import axios from "axios"; // Import Axios
import DeleteIcon from "@mui/icons-material/Delete";
import HighlightOffIcon from "@mui/icons-material/HighlightOff";
import DoneIcon from "@mui/icons-material/Done";
import EditIcon from "@mui/icons-material/Edit";
import EditOffIcon from "@mui/icons-material/EditOff";

function CottonIrrigationManagementForm() {
  const [soilMoistureSensor, setSoilMoistureSensor] = useState("None");
  const [sectionData, setSectionData] = useState("v10-harvest");
  const [date, setDate] = useState("");
  const [amount, setAmount] = useState("");
  const [applications, setApplications] = useState([]);
  const teamName = localStorage.getItem("username");
  const sensorOptions = ["Sentek probe (Holder Ag)", "BMP logic", "AquaSpy"];
  const [selectedOption, setSelectedOption] = useState("");
  const [dateToday, setDateToday] = useState(new Date().toISOString());
  const token = localStorage.getItem("token");

  const amountOptions = [
    "0.05",
    "0.10",
    "0.15",
    "0.20",
    "0.25",
    "0.30",
    "0.35",
    "0.40",
    "0.45",
    "0.50",
  ];

  const handleAmountCardClick = (selectedAmount) => {
    setAmount(selectedAmount);
  };

  const handleCardClick = (value) => {
    setSelectedOption(value);
  };

  const handleDeleteApplication = (appId) => {
    axios
      .delete(`/api/deletecottonirrigationApplication/${appId}`, {
        headers: {
          Authorization: `Bearer ${token}`, // Include the token in the Authorization header
        },
      })
      .then((response) => {
        if (response.status === 200) {
          // Application deleted successfully, now update the table data
          fetchData();
        } else {
          console.error("Failed to delete the application");
        }
      })
      .catch((error) => {
        console.error("Error deleting the application:", error);
      });
  };

  const fetchData = () => {
    axios
      .get(
        "/api/cottonfetchSoilMoistureSensorData",
        {
          params: {
            teamName, // Replace with the actual team name
          },
        },
        {
          headers: {
            Authorization: `Bearer ${token}`, // Include the token in the Authorization header
          },
        }
      ) // Update the URL accordingly
      .then((response) => {
        // Handle the successful response and update the state
        setApplications(response.data);
      })
      .catch((error) => {
        // Handle errors
        console.error("Error fetching data:", error);
      });
  };

  // Call the fetchData function when the component mounts
  useEffect(() => {
    fetchData();
  }, []);

  const handleAddApplication = () => {
    // Add the application to the applications array
    const newApplication = {
      date: date,
      amount: amount,
    };
    setApplications([...applications, newApplication]);

    // Clear the form fields
    setDate("");
    setAmount("");
  };

  // Function to send form data to the backend
  const submitForm = () => {
    // Prepare the data to be sent
    let formData;
    if (selectedOption === "soil-moisture") {
      formData = {
        date: date,
        reading: amount,
        options: selectedOption,
        applied: "no",
        teamName, // Get team name from session
        sensorType: soilMoistureSensor, // Send sensor type
        dateToday: dateToday,
      };
    } else if (selectedOption === "calendar") {
      formData = {
        date: date,
        reading: amount,
        options: selectedOption,
        applied: "no",
        teamName, // Get team name from session
        sensorType: "", // Send sensor type
        dateToday: dateToday,
      };
    } else if (selectedOption === "evapotranspiration") {
      formData = {
        date: date,
        reading: amount,
        options: selectedOption,
        applied: "no",
        teamName, // Get team name from session
        sensorType: "", // Send sensor type
        dateToday: dateToday,
      };
    }

    // Send a POST request to your backend endpoint
    axios
      .post("/api/cottonsoilmoisturesensorsubmit", formData, {
        headers: {
          Authorization: `Bearer ${token}`, // Include the token in the Authorization header
        },
      }) // Update the URL accordingly
      .then((response) => {
        // Handle the successful response if needed
        if (response.status === 200) {
          console.log("Application data sent to the backend successfully");
          fetchData();
        } else {
          console.error("Failed to send application data to the backend");
        }
      })
      .catch((error) => {
        // Handle errors
        console.error("Error submitting form:", error);
      });
  };

  const handleSensorCardClick = (selectedSensor) => {
    // Handle card click event to select the sensor
    //if (!soilMoistureSensor)
    setSoilMoistureSensor(selectedSensor);
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <Container>
      <Grid item xs={12}>
        <h4>You have three options for irrigation management:</h4>
        <div style={{ display: "flex", flexWrap: "wrap" }}>
          <Card
            onClick={() => handleCardClick("soil-moisture")}
            sx={{
              width: "30%",
              minWidth: "200px",
              cursor: "pointer",
              backgroundColor:
                selectedOption === "soil-moisture" ? "#fa4616" : "#D8D4D7",
              border: "2px solid #fa4616",
              borderRadius: "8px",
            }}
          >
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Soil Moisture-Based
              </Typography>
            </CardContent>
          </Card>
          <Card
            onClick={() => handleCardClick("evapotranspiration")}
            sx={{
              width: "30%",
              minWidth: "200px",
              cursor: "pointer",
              backgroundColor:
                selectedOption === "evapotranspiration" ? "#fa4616" : "#D8D4D7",
              border: "2px solid #fa4616",
              borderRadius: "8px",
              margin: "5px",
            }}
          >
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Evapotranspiration Based
              </Typography>
            </CardContent>
          </Card>
          <Card
            onClick={() => handleCardClick("calendar")}
            sx={{
              width: "30%",
              minWidth: "200px",
              cursor: "pointer",
              backgroundColor:
                selectedOption === "calendar" ? "#fa4616" : "#D8D4D7",
              border: "2px solid #fa4616",
              borderRadius: "8px",
            }}
          >
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Calendar-Based
              </Typography>
            </CardContent>
          </Card>
        </div>
      </Grid>
      <br></br>
      {/* <div style={{ display: "flex", flexWrap: "wrap" }}>
        <Grid container spacing={1}>
          <Grid
            item
            xs={4}
            style={{ display: "flex", justifyContent: "center" }}
          >
            <RadioGroup
              row
              value={selectedOption}
              onChange={(e) => setSelectedOption(e.target.value)}
            >
              <FormControlLabel
                value="soil-moisture"
                control={<Radio />}
                label="Soil Moisture"
              />
            </RadioGroup>
          </Grid>

          <Grid
            item
            xs={4}
            style={{ display: "flex", justifyContent: "center" }}
          >
            <RadioGroup
              row
              value={selectedOption}
              onChange={(e) => setSelectedOption(e.target.value)}
            >
              <FormControlLabel
                value="evapotranspiration"
                control={<Radio />}
                label="Evapotranspiration"
              />
            </RadioGroup>
          </Grid>

          <Grid
            item
            xs={4}
            style={{ display: "flex", justifyContent: "center" }}
          >
            <RadioGroup
              row
              value={selectedOption}
              onChange={(e) => setSelectedOption(e.target.value)}
            >
              <FormControlLabel
                value="calendar"
                control={<Radio />}
                label="Calendar"
              />
            </RadioGroup>
          </Grid>
        </Grid>
      </div> */}
      {selectedOption === "soil-moisture" && (
        <>
          <p>
            One soil moisture probe will be installed per-team for soil moisture
            monitoring. Teams will be responsible to communicate the type of
            soil moisture sensor to be installed in their plot at the time of
            planting.
          </p>
          {/* <ul>
                  <li>Sentek probe (Holder Ag)</li>
                  <li>BMP logic</li>
                  <li>AquaSpy</li>
                </ul> */}
          <p>
            You will have access to soil moisture data on the respective
            company's website.
          </p>
          <ul>
            <li>
              <p>
                Select the irrigation amount (depth) in 0.05-inch increments at
                least one day before the application.
              </p>
            </li>
            <li>
              <p>
                From planting to harvest, the maximum irrigation depth per
                application is 0.5 inches.
              </p>
            </li>
            <li>
              <p>No irrigation will be applied if no selection is made.</p>
            </li>
          </ul>
          <Typography variant="h6" gutterBottom>
            Soil moisture sensor
          </Typography>
          <div className="field">
            <div style={{ display: "flex", flexWrap: "wrap" }}>
              {/* Cards for selecting sensor */}
              {sensorOptions.map((sensorOption) => (
                <Card
                  key={sensorOption}
                  onClick={() => handleSensorCardClick(sensorOption)}
                  sx={{
                    cursor: "pointer",
                    padding: "8px",
                    backgroundColor:
                      soilMoistureSensor === sensorOption
                        ? "#fa4616"
                        : "#D8D4D7",
                    border: "2px solid #fa4616", // Highlight the selected card
                    marginBottom: "8px",
                    marginRight: "8px", // Add margin between cards for spacing
                    width: "200px", // Set a fixed width for each card
                    //opacity: soilMoistureSensor ? 0.75 : 1, // Disable the card if sensor is already selected //fix the sensor once selected
                  }}
                >
                  <CardContent>
                    <Typography variant="body2">{sensorOption}</Typography>
                  </CardContent>
                </Card>
              ))}
              <p></p>
              <p></p>
            </div>
            {/* <div className="control">
              <p></p>
              <FormControl variant="outlined" fullWidth>
                <InputLabel htmlFor="soilMoistureSensor">
                  Select Sensor
                </InputLabel>
                <Select
                  id="soilMoistureSensor"
                  name="soilMoistureSensor"
                  label="Soil moisture sensor"
                  value={soilMoistureSensor}
                  onChange={(e) => setSoilMoistureSensor(e.target.value)}
                  //disabled={!!soilMoistureSensor} //fix the sensor once selected
                >
                  <MenuItem value="None">None</MenuItem>
                  <MenuItem value="Sentek probe (Holder Ag)">
                    Sentek probe (Holder Ag)
                  </MenuItem>
                  <MenuItem value="BMP logic">BMP logic</MenuItem>
                  <MenuItem value="AquaSpy">AquaSpy</MenuItem>
                </Select>
              </FormControl>
            </div> */}
          </div>
        </>
      )}

      {selectedOption === "evapotranspiration" && (
        <>
          <p>
            {" "}
            Recommonded Corn Irrigation apps for evapotranspiration based
            irrigation scheduling{" "}
            <a href="https://smartirrigationapps.org/cotton-app/">
              https://smartirrigationapps.org/cotton-app/
            </a>
          </p>
        </>
      )}

      {selectedOption === "calendar" && (
        <p>
          Recommonded Resources for calendar based irrigation scheduling . The
          QR code for resources is available below. Scan the QR code to learn
          more.
        </p>
      )}

      <div
        id="irri-mgmnt-option-tabs"
        className="tabs"
        style={{ display: "flex", flexWrap: "wrap" }}
      >
        <Tabs
          value={sectionData}
          onChange={(e, newValue) => setSectionData(newValue)}
          aria-label="Irrigation Management Options"
          variant="fullWidth"
        >
          <Tab label="Irrigation" value="v10-harvest" />
          {/* <Tab label="Planting to V10" value="planting-v10" /> */}
        </Tabs>
      </div>
      <div id="irri-mgmnt-option-tab-content" className="tab-content">
        <section data-content="v10-harvest" className="is-active">
          {/* Include the content for "Irrigation" tab */}

          <div>
            <h4> Planting to V10</h4>
            <TextField
              id="date-input-planting-v10"
              label="Date"
              variant="outlined"
              fullWidth
              type="date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              InputLabelProps={{
                shrink: true,
              }}
            />
            <br></br>
            <br></br>
            <div style={{ display: "flex", flexWrap: "wrap" }}>
              {/* Cards for selecting amount */}
              <Card
                sx={{
                  cursor: "pointer",
                  padding: "8px",
                  backgroundColor: "white",
                  marginBottom: "8px",
                  marginRight: "2px",
                  textAlign: "center",
                  fontWeight: "bold",
                  //border: "2px solid #fa4616",
                }}
              >
                <CardContent>
                  <Typography variant="body2">Amount</Typography>
                </CardContent>
              </Card>

              {amountOptions.map((option) => (
                <Card
                  key={option}
                  onClick={() => handleAmountCardClick(option)}
                  sx={{
                    cursor: "pointer",
                    padding: "8px",
                    backgroundColor: amount === option ? "#fa4616" : "#D8D4D7",
                    marginBottom: "8px",
                    marginRight: "2px",
                    textAlign: "center",
                    fontWeight: "bold",
                    border: "2px solid #fa4616",
                  }}
                >
                  <CardContent>
                    <Typography variant="body2">{option}</Typography>
                  </CardContent>
                </Card>
              ))}
            </div>
            <br></br>
            <FormControl variant="outlined" fullWidth>
              <InputLabel htmlFor="select-planting-v10">
                Amount (Inches)
              </InputLabel>

              <Select
                id="select-planting-v10"
                name="amount"
                label="Amount (Inches)"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
              >
                <MenuItem value="None">None</MenuItem>
                <MenuItem value="0.05">0.05</MenuItem>
                <MenuItem value="0.10">0.10</MenuItem>
                <MenuItem value="0.15">0.15</MenuItem>
                <MenuItem value="0.20">0.20</MenuItem>
                <MenuItem value="0.25">0.25</MenuItem>
                <MenuItem value="0.30">0.30</MenuItem>
                <MenuItem value="0.35">0.35</MenuItem>
                <MenuItem value="0.40">0.40</MenuItem>
                <MenuItem value="0.45">0.45</MenuItem>
                <MenuItem value="0.50">0.50</MenuItem>
              </Select>
            </FormControl>
            {/* <Button
              id={`irri-mgmnt-planting-v10-add`}
              variant="outlined"
              color="primary"
              onClick={handleAddApplication}
            >
              Add Application
            </Button> */}
          </div>
          {/* Add a submit button */}
          <div>
            <Button
              variant="contained"
              color="primary"
              onClick={submitForm}
              style={{ marginTop: "16px" }}
            >
              Submit
            </Button>
          </div>
        </section>
        {selectedOption === "soil-moisture" && (
          <TableContainer component={Paper}>
            <card> Selected sensor: </card>
            <Table
              id="irri-mgmnt-v10-harvest-table"
              aria-label="Irrigation Management Table"
            >
              <TableHead>
                <TableRow>
                  <TableCell>#</TableCell>
                  <TableCell>Date</TableCell>
                  <TableCell>Amount</TableCell>
                  <TableCell>Sensor</TableCell>
                  <TableCell>Applied</TableCell>
                  <TableCell>
                    <EditIcon />
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {applications
                  .filter((app) => app.options === "soil-moisture")
                  .sort((a, b) => new Date(a.date) - new Date(b.date))
                  .map((app, index) => (
                    <TableRow key={app.id}>
                      <TableCell>{index + 1}</TableCell>
                      <TableCell>{formatDate(app.date)}</TableCell>
                      <TableCell>{app.reading}</TableCell>
                      <TableCell>{app.sensorType}</TableCell>
                      {/* <TableCell>{app.applied}</TableCell> */}
                      <TableCell>
                        {" "}
                        {app.applied === "no" ? (
                          <HighlightOffIcon />
                        ) : (
                          <DoneIcon />
                        )}
                      </TableCell>
                      {/* <TableCell>Icon</TableCell> */}
                      <TableCell>
                        <button>
                          {app.applied === "no" ? (
                            <DeleteIcon
                              onClick={() => handleDeleteApplication(app.id)}
                            />
                          ) : (
                            <EditOffIcon />
                          )}
                        </button>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}

        {selectedOption === "evapotranspiration" && (
          <TableContainer component={Paper}>
            <Table
              id="irri-mgmnt-v10-harvest-table"
              aria-label="Irrigation Management Table"
            >
              <TableHead>
                <TableRow>
                  <TableCell>#</TableCell>
                  <TableCell>Date</TableCell>
                  <TableCell>Amount</TableCell>
                  <TableCell>Applied</TableCell>
                  <TableCell>
                    <EditIcon />
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {applications
                  .filter((app) => app.options === "evapotranspiration")
                  .sort((a, b) => new Date(a.date) - new Date(b.date))
                  .map((app, index) => (
                    <TableRow key={app.id}>
                      <TableCell>{index + 1}</TableCell>
                      <TableCell>{formatDate(app.date)}</TableCell>
                      <TableCell>{app.reading}</TableCell>
                      <TableCell>
                        {" "}
                        {app.applied === "no" ? (
                          <HighlightOffIcon />
                        ) : (
                          <DoneIcon />
                        )}
                      </TableCell>
                      <TableCell>
                        <button>
                          {app.applied === "no" ? (
                            <DeleteIcon
                              onClick={() => handleDeleteApplication(app.id)}
                            />
                          ) : (
                            <EditOffIcon />
                          )}
                        </button>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}

        {selectedOption === "calendar" && (
          <TableContainer component={Paper}>
            <Table
              id="irri-mgmnt-v10-harvest-table"
              aria-label="Irrigation Management Table"
            >
              <TableHead>
                <TableRow>
                  <TableCell>#</TableCell>
                  <TableCell>Date</TableCell>
                  <TableCell>Amount</TableCell>
                  <TableCell>Applied</TableCell>
                  <TableCell>
                    <EditIcon />
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {applications
                  .filter((app) => app.options === "calendar")
                  .sort((a, b) => new Date(a.date) - new Date(b.date))
                  .map((app, index) => (
                    <TableRow key={app.id}>
                      <TableCell>{index + 1}</TableCell>
                      <TableCell>{formatDate(app.date)}</TableCell>
                      <TableCell>{app.reading}</TableCell>
                      <TableCell>
                        {app.applied === "no" ? (
                          <HighlightOffIcon />
                        ) : (
                          <DoneIcon />
                        )}
                      </TableCell>
                      <TableCell>
                        <button>
                          {app.applied === "no" ? (
                            <DeleteIcon
                              onClick={() => handleDeleteApplication(app.id)}
                            />
                          ) : (
                            <EditOffIcon />
                          )}
                        </button>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </div>
    </Container>
  );
}

export default CottonIrrigationManagementForm;